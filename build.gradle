plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.jpa'
    id 'net.corda.plugins.cordapp-cpb2'
    id 'net.corda.cordapp.cordapp-configuration'
}

cordapp {
    targetPlatformVersion = platformVersion.toInteger()
    minimumPlatformVersion = platformVersion.toInteger()

    contract {
        name "THIS SHOULD NOT BE HERE. IT'S NOT A CORDAPP!!!!!!!!!!!"
        versionId cordappVersionId.toInteger()
        vendor cordappVendorName
    }
}

allprojects {
    group 'net.r3.corda.ledger.utxo'
    version '0.9-SNAPSHOT'

    apply plugin: 'net.corda.plugins.cordapp-cpb2'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'maven-publish'

    // Declare the set of Java compiler options we need to build a CorDapp.
    tasks.withType(JavaCompile).configureEach {
        // -parameters - Needed for reflection and serialization to work correctly.
        options.compilerArgs += [
                "-parameters"
        ]
    }

    repositories {
        mavenLocal()

        maven {
            url = "$artifactoryContextUrl/corda-os-maven"
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            }
        }

        def cordaUseCache = System.getenv("CORDA_USE_CACHE")
        if (cordaUseCache != null) {
            maven {
                url = "$artifactoryContextUrl/$cordaUseCache"
                name = "R3 Maven remote repositories"
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
        } else {
            mavenCentral()

            exclusiveContent {
                forRepository {
                    maven {
                        url 'https://repository.mulesoft.org/nexus/content/repositories/public'
                    }
                }
                filter {
                    includeGroup 'org.mule.distributions'
                    includeGroup 'antlr'
                }
            }

            // NOTE: this needs to be removed once Micrometer contains OSGi metadata
            //   https://github.com/micrometer-metrics/micrometer/pull/3457
            exclusiveContent {
                forRepository {
                    maven {
                        url "$artifactoryContextUrl/corda-dependencies-dev"
                    }
                }
                filter {
                    includeGroup 'io.micrometer'
                }
            }
        }
    }

    dependencies {
        cordaProvided 'org.jetbrains.kotlin:kotlin-osgi-bundle'
        cordaProvided 'org.jetbrains:annotations:24.0.1'
        cordaProvided platform("net.corda:corda-api:$cordaApiVersion")
        cordaProvided 'net.corda:corda-base'
        cordaProvided 'net.corda:corda-ledger-utxo'
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }
}
