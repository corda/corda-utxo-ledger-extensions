import static org.gradle.jvm.toolchain.JavaLanguageVersion.of
import static org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_11
import static org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_8

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
    id 'net.corda.cordapp.cordapp-configuration'
    id 'com.r3.internal.gradle.plugins.r3Publish'
    id 'net.corda.cordapp.cordapp-configuration'
}

def javaVersion = 11

allprojects {
    group 'com.r3.corda.ledger.utxo'
    if (System.getenv("RELEASE_VERSION")?.trim()) {
        version = System.getenv("RELEASE_VERSION")
    } else {
        def versionSuffix = '-SNAPSHOT'
        if (project.hasProperty('overridePublishVersionSuffix')) {
            versionSuffix = project.property('overridePublishVersionSuffix')
        } else if (System.getenv('VERSION_SUFFIX')) {
            versionSuffix = System.getenv('VERSION_SUFFIX')
        }
        version = "$cordautxoVersion$versionSuffix"
    }
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'maven-publish'

    // Declare the set of Java compiler options we need to build a CorDapp.
    tasks.withType(JavaCompile).configureEach {
        // -parameters - Needed for reflection and serialization to work correctly.
        options.compilerArgs += [
                "-parameters"
        ]
    }

    pluginManager.withPlugin('java') {
        java {
            toolchain {
                languageVersion = of(javaVersion)
            }

            withJavadocJar()
            withSourcesJar()
        }
    }

    pluginManager.withPlugin('org.jetbrains.kotlin.jvm') {
        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
            compilerOptions {
                allWarningsAsErrors = true
                languageVersion = KOTLIN_1_8
                apiVersion = KOTLIN_1_8
                jvmTarget = JVM_11
                javaParameters = true   // Useful for reflection.
                freeCompilerArgs.addAll([
                    "-Xjvm-default=all"
                ])
            }
        }
    }

    pluginManager.withPlugin('net.corda.plugins.cordapp-cpk2') {
        tasks.named('jar', Jar) {
            archiveBaseName = "corda-ledger-extensions-${project.name}"
        }
    }

    repositories {
        mavenLocal()

        maven {
            url = "$artifactoryContextUrl/corda-os-maven"
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            }
        }

        def cordaUseCache = System.getenv("CORDA_USE_CACHE")
        if (cordaUseCache != null) {
            maven {
                url = "$artifactoryContextUrl/$cordaUseCache"
                name = "R3 Maven remote repositories"
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
        } else {
            mavenCentral()

            exclusiveContent {
                forRepository {
                    maven {
                        url 'https://repository.mulesoft.org/nexus/content/repositories/public'
                    }
                }
                filter {
                    includeGroup 'org.mule.distributions'
                    includeGroup 'antlr'
                }
            }

            // NOTE: this needs to be removed once Micrometer contains OSGi metadata
            //   https://github.com/micrometer-metrics/micrometer/pull/3457
            exclusiveContent {
                forRepository {
                    maven {
                        url "$artifactoryContextUrl/corda-dependencies-dev"
                    }
                }
                filter {
                    includeGroup 'io.micrometer'
                }
            }
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }
}
