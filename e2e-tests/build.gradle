plugins {
    id 'org.jetbrains.kotlin.jvm'
}

description 'End to end tests'

configurations {
    cpis {
        canBeConsumed = false
        transitive = false
    }
    notaryServerCPB {
        canBeConsumed = false
        canBeResolved = true
    }
}


sourceSets {
    e2eTest {
        kotlin {
            srcDirs += [ 'src/e2eTest/kotlin' ]
        }
        resources {
            srcDirs = [ 'src/e2eTest/resources' ]
        }
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

kotlin {
    target {
        java
        compilations.e2eTest {
            associateWith compilations.main
            associateWith compilations.test

            configurations {
                e2eTestApi.extendsFrom testApi
                e2eTestImplementation.extendsFrom testImplementation
                e2eTestRuntimeOnly.extendsFrom testRuntimeOnly
            }
        }
    }
}

dependencies {
    notaryServerCPB("com.r3.corda.notary.plugin.nonvalidating:notary-plugin-non-validating-server:$cordaNotaryPluginsVersion") {
        artifact {
            classifier = 'package'
            extension = 'cpb'
        }
    }

    cpis project(path: ':e2e-tests:cpbs:ledger-utxo-advanced-fungible-demo-app', configuration: 'cordaCPB')
    cpis project(path: ':e2e-tests:cpbs:ledger-utxo-advanced-identifiable-demo-app', configuration: 'cordaCPB')
    cpis project(path: ':e2e-tests:cpbs:ledger-utxo-advanced-chainable-demo-app', configuration: 'cordaCPB')

    e2eTestImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    e2eTestImplementation "org.assertj:assertj-core:$assertjVersion"
    e2eTestImplementation "net.corda:corda-e2e-test-utilities:$cordaRuntimeOsVersion"
    e2eTestImplementation "net.corda:corda-test-utilities:$cordaRuntimeOsVersion"
    e2eTestImplementation "net.corda:corda-rest:$cordaRuntimeOsVersion"
    e2eTestImplementation "org.slf4j:slf4j-api:$slf4jVersion"
    e2eTestImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"

    e2eTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    e2eTestRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
}

def e2eTestResources = tasks.named('processE2eTestResources', ProcessResources) {
    from(configurations.cpis) {
        into 'META-INF'
        rename "(.+)(-(?:\\d+\\.*)+.*)(\\.cpb)\$", "\$1\$3"
    }
}

def getNotaryServerCPB = tasks.named("processE2eTestResources", ProcessResources) {
    from(configurations.notaryServerCPB) {
        into 'META-INF'
        rename "notary-plugin-non-validating-server-.*\\.cpb\$", "notary-plugin-non-validating-server.cpb"
    }
}

tasks.register('e2eTest', Test) {
    description = "Runs e2e tests."
    group = "verification"

    testClassesDirs = project.sourceSets.e2eTest.output.classesDirs
    classpath = project.sourceSets.e2eTest.runtimeClasspath

    def combinedWorker = project.getProperties().getOrDefault("isCombinedWorker",false)

    systemProperty "restEndpointUrl", project.getProperties().getOrDefault("restEndpointUrl","https://localhost:8888/")

    println "E2E_CLUSTER_B_P2P_HOST: is ${System.getenv('E2E_CLUSTER_B_P2P_HOST')}"

    // Note these port values have to match what is setup as part of port forwarding at cluster bootstrap time.
    // E.g. during Jenkins pipeline setup.

    systemProperty "cryptoWorkerHealthHttp",
            project.getProperties().getOrDefault("cryptoWorkerHealthHttp",combinedWorker ? null : "http://localhost:7001/")
    systemProperty "restWorkerHealthHttp",
            project.getProperties().getOrDefault("restWorkerHealthHttp",combinedWorker ? null : "http://localhost:7002/")
    systemProperty "flowWorkerHealthHttp",
            project.getProperties().getOrDefault("flowWorkerHealthHttp",combinedWorker ? null : "http://localhost:7003/")
    systemProperty "dbWorkerHealthHttp",
            project.getProperties().getOrDefault("dbWorkerHealthHttp",combinedWorker ? null : "http://localhost:7004/")

    systemProperty "combinedWorkerHealthHttp",
            project.getProperties().getOrDefault("combinedWorkerHealthHttp",combinedWorker ? "http://localhost:7000/" : null)
}

tasks.named('e2eTest', Test) {
    dependsOn e2eTestResources
    dependsOn getNotaryServerCPB
}
