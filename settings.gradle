pluginManagement {
    repositories {
        mavenLocal()
        mavenCentral()
        def cordaUseCache = System.getenv("CORDA_USE_CACHE")
        if (cordaUseCache != null) {
            maven {
                url = "${artifactoryContextUrl}/${cordaUseCache}"
                name = "R3 Maven remote repositories"
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = settings.ext.find('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = settings.ext.find('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
        } else {
            maven {
                url "${artifactoryContextUrl}/corda-os-maven"
                content {
                    includeGroupByRegex 'net\\.corda\\.cordapp(\\..*)?'
                }
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = settings.ext.find('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = settings.ext.find('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
            maven {
                url "$artifactoryContextUrl/engineering-tools-maven"
                credentials {
                    username = settings.ext.find('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = settings.ext.find('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
                content {
                    includeGroupByRegex 'com\\.r3\\.internal(\\..*)?'
                }
            }
            gradlePluginPortal {
                content {
                    excludeGroupByRegex 'net\\.corda\\.cordapp(\\..*)?'
                }
            }
        }
    }

    //  The plugin dependencies with versions of the plugins congruent with the specified CorDapp plugin version,
    //  Corda API version, and Kotlin version.
    plugins {
        id 'com.gradle.enterprise' version gradleEnterpriseVersion
        id 'com.gradle.common-custom-user-data-gradle-plugin' version gradleDataPlugin
        id 'net.corda.plugins.cordapp-cpk2' version cordaPluginsVersion
        id 'net.corda.plugins.cordapp-cpb2' version cordaPluginsVersion
        id 'net.corda.cordapp.cordapp-configuration' version cordaApiVersion
        id 'org.jetbrains.kotlin.jvm' version kotlinVersion
        id 'org.jetbrains.kotlin.plugin.jpa' version kotlinVersion
        id 'org.jetbrains.kotlin.plugin.allopen' version kotlinVersion
        id 'com.jfrog.artifactory' version artifactoryPluginVersion
        id "org.sonarqube" version sonarVersion
    }
}

plugins {
    id 'com.gradle.common-custom-user-data-gradle-plugin'
    id 'com.gradle.enterprise'
}

rootProject.name = 'corda-utxo-ledger-extensions'

include 'base'
include 'chainable'
include 'examples:ledger-utxo-advanced-chainable-demo-app'
include 'examples:ledger-utxo-advanced-chainable-demo-contract'
include 'examples:ledger-utxo-advanced-fungible-demo-app'
include 'examples:ledger-utxo-advanced-fungible-demo-contract'
include 'examples:ledger-utxo-advanced-identifiable-demo-app'
include 'examples:ledger-utxo-advanced-identifiable-demo-contract'
include 'e2e-tests'
include 'e2e-tests:cpbs:ledger-utxo-advanced-chainable-test-app'
include 'e2e-tests:cpbs:ledger-utxo-advanced-chainable-test-contract'
include 'e2e-tests:cpbs:ledger-utxo-advanced-fungible-test-app'
include 'e2e-tests:cpbs:ledger-utxo-advanced-fungible-test-contract'
include 'e2e-tests:cpbs:ledger-utxo-advanced-identifiable-test-app'
include 'e2e-tests:cpbs:ledger-utxo-advanced-identifiable-test-contract'
include 'e2e-tests:cpbs:ledger-utxo-advanced-issuable-test-app'
include 'e2e-tests:cpbs:ledger-utxo-advanced-issuable-test-contract'
include 'e2e-tests:cpbs:ledger-utxo-advanced-ownable-test-app'
include 'e2e-tests:cpbs:ledger-utxo-advanced-ownable-test-contract'
include 'fungible'
include 'identifiable'
include 'issuable'
include 'ownable'

gradleEnterprise {
    server = gradleEnterpriseUrl
    allowUntrustedServer = false
    def apiKey = settings.ext.find('CORDA_GRADLE_SCAN_KEY') ?: System.getenv('CORDA_GRADLE_SCAN_KEY')
    accessKey = apiKey
    buildScan {
        if (apiKey?.trim()) {
            publishAlways()
            capture {
                taskInputFiles = true
            }
            uploadInBackground = false
        }
    }
}
